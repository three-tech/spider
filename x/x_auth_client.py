#!/usr/bin/env python3
"""
XËÆ§ËØÅÂÆ¢Êà∑Á´Ø - ÂÆåÂÖ®ÂèÇËÄÉTypeScriptÁâàÊú¨ÁöÑtwitter-openapi-typescriptÂÆûÁé∞
Âü∫‰∫éCookieËÆ§ËØÅÁöÑTwitter APIÂÆ¢Êà∑Á´Ø
"""

import json

import requests

from base.logger import get_logger

logging = get_logger('x')
from typing import Dict, Optional, Any
import time


class XAuthClient:
    """XÂπ≥Âè∞ËÆ§ËØÅÂÆ¢Êà∑Á´Ø - ÂÆåÂÖ®Ê®°ÊãüTypeScript _xClientÂáΩÊï∞"""

    def __init__(self, auth_token: str):
        """
        ÂàùÂßãÂåñXËÆ§ËØÅÂÆ¢Êà∑Á´Ø - ÂÆåÂÖ®ÊåâÁÖßTypeScript utils.tsÁöÑ_xClientÂáΩÊï∞
        
        Args:
            auth_token: TwitterÁöÑauth_token CookieÂÄº
        """
        self.auth_token = auth_token
        self.session = requests.Session()
        self.cookies = {}
        self.csrf_token = ""
        self.bearer_token = "AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA"

        # ÂÆåÂÖ®ÊåâÁÖßTypeScriptÊµÅÁ®ãÂàùÂßãÂåñ
        self.initialize_client()

    def initialize_client(self):
        """ÂàùÂßãÂåñÂÆ¢Êà∑Á´Ø - ÂÆåÂÖ®ÊåâÁÖßTypeScript _xClientÂáΩÊï∞ÁöÑÊµÅÁ®ã"""
        try:
            logging.info("üîÑ Ê≠£Âú®ÂàùÂßãÂåñXÂÆ¢Êà∑Á´Ø...")

            # Ê≠•È™§1: ËÆøÈóÆmanifest.json - ÂÆåÂÖ®ÊåâÁÖßTypeScript‰ª£Á†Å
            resp = self.session.get(
                "https://x.com/manifest.json",
                headers={
                    "cookie": f"auth_token={self.auth_token}",
                    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                }
            )

            if resp.status_code != 200:
                raise Exception(f"ËÆøÈóÆmanifest.jsonÂ§±Ë¥•: {resp.status_code}")

            # Ê≠•È™§2: Ëß£Êûêset-cookie - ÂÆåÂÖ®ÊåâÁÖßTypeScriptÈÄªËæë
            res_cookies = resp.headers.get('set-cookie', '')
            if res_cookies:
                # ÊåâÁÖßTypeScriptÁöÑreduceÈÄªËæëËß£Êûêcookie
                cookie_parts = res_cookies.split(',')
                for cookie_part in cookie_parts:
                    # ÂèñÁ¨¨‰∏Ä‰∏™ÂàÜÂè∑ÂâçÁöÑÈÉ®ÂàÜ
                    main_part = cookie_part.split(';')[0].strip()
                    if '=' in main_part:
                        name, value = main_part.split('=', 1)
                        name = name.strip()
                        value = value.strip()
                        # ËøáÊª§ÊéâÊó†ÊïàÁöÑcookieÂ±ûÊÄß
                        if name and not name.lower().startswith(
                                ('path', 'domain', 'expires', 'max-age', 'secure', 'httponly', 'samesite')):
                            self.cookies[name] = value

            # Ê≠•È™§3: Á°Æ‰øùauth_tokenÂú®cookies‰∏≠ - ÊåâÁÖßTypeScriptÈÄªËæë
            self.cookies['auth_token'] = self.auth_token

            # Ê≠•È™§4: ÊèêÂèñCSRF token
            self.csrf_token = self.cookies.get('ct0', '')

            # Ê≠•È™§5: ËÆæÁΩÆ‰ºöËØù
            self.setup_session()

            logging.info("‚úÖ XËÆ§ËØÅÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÊàêÂäü")
            logging.info(f"CookieÊï∞Èáè: {len(self.cookies)}")
            if self.csrf_token:
                logging.info(f"CSRF Token: {self.csrf_token[:10]}...")

        except Exception as e:
            logging.error(f"‚ùå XÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            raise

    def setup_session(self):
        """ËÆæÁΩÆ‰ºöËØù - Ê®°Êãütwitter-openapi-typescriptÁöÑËØ∑Ê±ÇÂ§¥"""
        # ÊûÑÂª∫CookieÂ≠óÁ¨¶‰∏≤
        cookie_str = '; '.join([f"{k}={v}" for k, v in self.cookies.items()])

        # ËÆæÁΩÆÂÆåÊï¥ÁöÑËØ∑Ê±ÇÂ§¥
        self.session.headers.update({
            "authorization": f"Bearer {self.bearer_token}",
            "content-type": "application/json",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "x-twitter-active-user": "yes",
            "x-twitter-auth-type": "OAuth2Session",
            "x-twitter-client-language": "en",
            "cookie": cookie_str,
            "referer": "https://x.com/",
            "origin": "https://x.com",
        })

        # Â¶ÇÊûúÊúâCSRF tokenÔºåËÆæÁΩÆÂà∞header‰∏≠
        if self.csrf_token:
            self.session.headers["x-csrf-token"] = self.csrf_token

    def get_user_by_screen_name(self, screen_name: str) -> Optional[Dict[str, Any]]:
        """
        ÈÄöËøáÁî®Êà∑ÂêçËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ - ‰ΩøÁî®Ê≠£Á°ÆÁöÑËÆ§ËØÅÊµÅÁ®ã
        """
        try:
            # ‰ΩøÁî®Ê≠£Á°ÆÁöÑGraphQLÁ´ØÁÇπ
            url = "https://x.com/i/api/graphql/G3KGOASz96M-Qu0nwmGXNg/UserByScreenName"

            variables = {
                "screen_name": screen_name,
                "withSafetyModeUserFields": True
            }

            features = {
                "hidden_profile_likes_enabled": True,
                "hidden_profile_subscriptions_enabled": True,
                "responsive_web_graphql_exclude_directive_enabled": True,
                "verified_phone_label_enabled": False,
                "subscriptions_verification_info_is_identity_verified_enabled": True,
                "subscriptions_verification_info_verified_since_enabled": True,
                "highlights_tweets_tab_ui_enabled": True,
                "responsive_web_twitter_article_notes_tab_enabled": True,
                "creator_subscriptions_tweet_preview_api_enabled": True,
                "responsive_web_graphql_skip_user_profile_image_extensions_enabled": False,
                "responsive_web_graphql_timeline_navigation_enabled": True
            }

            params = {
                "variables": json.dumps(variables, separators=(',', ':')),
                "features": json.dumps(features, separators=(',', ':'))
            }

            logging.info(f"üîç ËØ∑Ê±ÇÁî®Êà∑‰ø°ÊÅØ: @{screen_name}")
            if self.csrf_token:
                logging.info(f"CSRF Token: {self.csrf_token[:10]}...")
            else:
                logging.warning("‚ö†Ô∏è Ê≤°ÊúâCSRF token")

            response = self.session.get(url, params=params)

            logging.info(f"APIËØ∑Ê±ÇÁä∂ÊÄÅ: {response.status_code}")

            if response.status_code == 200:
                data = response.json()

                # ÊèêÂèñÁî®Êà∑‰ø°ÊÅØ
                user_data = data.get('data', {}).get('user', {})
                if user_data and 'result' in user_data:
                    user_result = user_data['result']
                    if user_result.get('__typename') == 'User':
                        legacy = user_result.get('legacy', {})
                        return {
                            'id_str': user_result.get('rest_id'),
                            'screen_name': legacy.get('screen_name'),
                            'name': legacy.get('name'),
                            'description': legacy.get('description'),
                            'followers_count': legacy.get('followers_count'),
                            'friends_count': legacy.get('friends_count'),
                            'statuses_count': legacy.get('statuses_count'),
                            'created_at': legacy.get('created_at'),
                            'profile_image_url_https': legacy.get('profile_image_url_https')
                        }

                logging.error(f"Áî®Êà∑Êï∞ÊçÆÊ†ºÂºèÂºÇÂ∏∏: {json.dumps(data, indent=2)[:500]}...")
                return None
            else:
                error_text = response.text[:500] if response.text else "No response body"
                logging.error(f"Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•: {response.status_code} - {error_text}")
                return None

        except Exception as e:
            logging.error(f"Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂºÇÂ∏∏: {e}")
            return None

    def get_user_tweets(self, user_id: str, cursor: Optional[str] = None, count: int = 20) -> Optional[Dict[str, Any]]:
        """
        Ëé∑ÂèñÁî®Êà∑Êé®Êñá - ‰ΩøÁî®Ê≠£Á°ÆÁöÑGraphQLÁ´ØÁÇπ
        """
        try:
            url = "https://x.com/i/api/graphql/V7H0Ap3_Hh2FyS75OCDO3Q/UserTweets"

            variables = {
                "userId": user_id,
                "count": count,
                "includePromotedContent": True,
                "withQuickPromoteEligibilityTweetFields": True,
                "withVoice": True,
                "withV2Timeline": True
            }

            if cursor:
                variables["cursor"] = cursor

            features = {
                "responsive_web_graphql_exclude_directive_enabled": True,
                "verified_phone_label_enabled": False,
                "creator_subscriptions_tweet_preview_api_enabled": True,
                "responsive_web_twitter_article_tweet_consumption_enabled": True,
                "tweet_awards_web_tipping_enabled": False,
                "responsive_web_graphql_skip_user_profile_image_extensions_enabled": False,
                "c9s_tweet_anatomy_moderator_badge_enabled": True,
                "tweetypie_unmention_optimization_enabled": True,
                "responsive_web_edit_tweet_api_enabled": True,
                "graphql_is_translatable_rweb_tweet_is_translatable_enabled": True,
                "view_counts_everywhere_api_enabled": True,
                "longform_notetweets_consumption_enabled": True,
                "responsive_web_twitter_article_data_v2_enabled": True,
                "tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled": True,
                "rweb_video_timestamps_enabled": True,
                "longform_notetweets_rich_text_read_enabled": True,
                "longform_notetweets_inline_media_enabled": True,
                "responsive_web_graphql_timeline_navigation_enabled": True,
                "responsive_web_enhance_cards_enabled": False,
                "freedom_of_speech_not_reach_fetch_enabled": True,
                "articles_preview_enabled": True,
                "communities_web_enable_tweet_community_results_fetch": True,
                "standardized_nudges_misinfo": True,
                "creator_subscriptions_quote_tweet_preview_enabled": True,
                "rweb_tipjar_consumption_enabled": True
            }

            params = {
                "variables": json.dumps(variables, separators=(',', ':')),
                "features": json.dumps(features, separators=(',', ':'))
            }

            response = self.session.get(url, params=params)

            if response.status_code == 200:
                data = response.json()

                # ÊèêÂèñÊé®ÊñáÊï∞ÊçÆ
                timeline = data.get('data', {}).get('user', {}).get('result', {}).get('timeline_v2', {})
                timeline_timeline = timeline.get('timeline', {})
                instructions = timeline_timeline.get('instructions', [])

                tweets = []
                next_cursor = None

                for instruction in instructions:
                    if instruction.get('type') == 'TimelineAddEntries':
                        entries = instruction.get('entries', [])
                        for entry in entries:
                            entry_id = entry.get('entryId', '')
                            if entry_id.startswith('tweet-'):
                                content = entry.get('content', {})
                                item_content = content.get('itemContent', {})
                                tweet_results = item_content.get('tweet_results', {})
                                result = tweet_results.get('result', {})
                                if result.get('__typename') == 'Tweet':
                                    tweets.append(result)
                            elif entry_id.startswith('cursor-bottom-'):
                                cursor_content = entry.get('content', {})
                                next_cursor = cursor_content.get('value')

                return {
                    'data': tweets,
                    'cursor': next_cursor
                }
            else:
                error_text = response.text[:500] if response.text else "No response body"
                logging.error(f"Ëé∑ÂèñÊé®ÊñáÂ§±Ë¥•: {response.status_code} - {error_text}")
                return None

        except Exception as e:
            logging.error(f"Ëé∑ÂèñÊé®ÊñáÂºÇÂ∏∏: {e}")
            return None

    def get_my_following(self):
        """Ëé∑ÂèñÊàëÁöÑÂÆåÊï¥ÂÖ≥Ê≥®ÂàóË°® - Âæ™ÁéØËé∑ÂèñÊâÄÊúâÁî®Êà∑"""
        try:
            logging.info("üîç ÂºÄÂßãËé∑ÂèñÂÆåÊï¥ÂÖ≥Ê≥®ÂàóË°®...")

            # Ëé∑ÂèñÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ
            current_user = self.get_current_user_info()
            if not current_user:
                logging.error("‚ùå Êó†Ê≥ïËé∑ÂèñÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ")
                return None

            user_id = current_user.get('id_str')
            if not user_id:
                logging.error("‚ùå Êó†Ê≥ï‰ªéÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ‰∏≠Ëé∑ÂèñÁî®Êà∑ID")
                return None

            logging.info(f"‚úÖ Ëé∑ÂèñÂà∞ÂΩìÂâçÁî®Êà∑ID: {user_id}")

            # ÂàùÂßãÂåñÂæ™ÁéØÂèòÈáè
            all_users = []
            cursor = None
            page_count = 0
            empty_count = 0
            request_interval = 3  # ËØ∑Ê±ÇÈó¥ÈöîÔºàÁßíÔºâ

            while True:
                page_count += 1
                logging.info(f"\n=== Á¨¨ {page_count} Ê¨°ËØ∑Ê±Ç ===")

                # Ê∑ªÂä†Èó¥ÈöîÊéßÂà∂ÔºàÁ¨¨‰∏ÄÈ°µÂêéÁîüÊïàÔºâ
                if page_count > 1:
                    logging.info(f"‚è∏Ô∏è Á≠âÂæÖ {request_interval} Áßí...")
                    time.sleep(request_interval)

                # ÊûÑÂª∫GraphQLÊü•ËØ¢ÂèÇÊï∞
                variables = {
                    "userId": user_id,
                    "count": 20,  # ÊØèÈ°µÂõ∫ÂÆö20‰∏™Áî®Êà∑
                    "includePromotedContent": False
                }

                if cursor:
                    variables["cursor"] = cursor
                    logging.info(f"üìç ‰ΩøÁî®Ê∏∏Ê†á: {cursor}")

                features = {
                    "rweb_tipjar_consumption_enabled": True,
                    "responsive_web_graphql_exclude_directive_enabled": True,
                    "verified_phone_label_enabled": False,
                    "creator_subscriptions_tweet_preview_api_enabled": True,
                    "responsive_web_graphql_timeline_navigation_enabled": True,
                    "responsive_web_graphql_skip_user_profile_image_extensions_enabled": False,
                    "communities_web_enable_tweet_community_results_fetch": True,
                    "c9s_tweet_anatomy_moderator_badge_enabled": True,
                    "articles_preview_enabled": True,
                    "tweetypie_unmention_optimization_enabled": True,
                    "responsive_web_edit_tweet_api_enabled": True,
                    "graphql_is_translatable_rweb_tweet_is_translatable_enabled": True,
                    "view_counts_everywhere_api_enabled": True,
                    "longform_notetweets_consumption_enabled": True,
                    "responsive_web_twitter_article_tweet_consumption_enabled": True,
                    "tweet_awards_web_tipping_enabled": False,
                    "creator_subscriptions_quote_tweet_preview_enabled": False,
                    "freedom_of_speech_not_reach_fetch_enabled": True,
                    "standardized_nudges_misinfo": True,
                    "tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled": True,
                    "rweb_video_timestamps_enabled": True,
                    "longform_notetweets_rich_text_read_enabled": True,
                    "longform_notetweets_inline_media_enabled": True,
                    "responsive_web_enhance_cards_enabled": False,
                    "responsive_web_media_download_video_enabled": True,
                    "responsive_web_text_conversations_enabled": False,
                    "blue_business_profile_image_shape_enabled": True,
                    "responsive_web_twitter_article_data_v2_enabled": True
                }

                # ÊûÑÂª∫ËØ∑Ê±ÇÂèÇÊï∞
                params = {
                    'variables': json.dumps(variables),
                    'features': json.dumps(features)
                }

                # ÂèëÈÄÅËØ∑Ê±Ç
                url = "https://x.com/i/api/graphql/iSicc7LrzWGBgDPL0tM_TQ/Following"

                response = self.session.get(url, params=params)
                logging.info(f"APIËØ∑Ê±ÇÁä∂ÊÄÅ: {response.status_code}")

                if response.status_code == 200:
                    data = response.json()

                    # Ëß£ÊûêÂÖ≥Ê≥®Áî®Êà∑Êï∞ÊçÆ
                    if 'data' in data and 'user' in data['data'] and 'result' in data['data']['user']:
                        timeline = data['data']['user']['result'].get('timeline', {})
                        timeline_data = timeline.get('timeline', {})
                        instructions = timeline_data.get('instructions', [])

                        current_users = []
                        next_cursor = None

                        for instruction in instructions:
                            if instruction.get('type') == 'TimelineAddEntries':
                                entries = instruction.get('entries', [])
                                for entry in entries:
                                    entry_id = entry.get('entryId', '')
                                    if entry_id.startswith('user-'):
                                        content = entry.get('content', {})
                                        item_content = content.get('itemContent', {})
                                        user_results = item_content.get('user_results', {})
                                        user_result = user_results.get('result', {})

                                        if user_result.get('__typename') == 'User':
                                            legacy = user_result.get('legacy', {})
                                            user_info = {
                                                'id_str': user_result.get('rest_id', ''),
                                                'screen_name': legacy.get('screen_name', ''),
                                                'name': legacy.get('name', ''),
                                                'description': legacy.get('description', ''),
                                                'followers_count': legacy.get('followers_count', 0),
                                                'friends_count': legacy.get('friends_count', 0),
                                                'statuses_count': legacy.get('statuses_count', 0),
                                                'verified': legacy.get('verified', False),
                                                'profile_image_url_https': legacy.get('profile_image_url_https', ''),
                                                'profile_banner_url': legacy.get('profile_banner_url', ''),
                                                'location': legacy.get('location', ''),
                                                'url': legacy.get('url', ''),
                                                'created_at': legacy.get('created_at', ''),
                                                'protected': legacy.get('protected', False)
                                            }
                                            current_users.append(user_info)
                                    elif entry_id.startswith('cursor-bottom-'):
                                        cursor_content = entry.get('content', {})
                                        next_cursor = cursor_content.get('value')

                        # Ê£ÄÊü•ÊòØÂê¶Ëé∑ÂèñÂà∞Áî®Êà∑
                        if len(current_users) == 0:
                            empty_count += 1
                            logging.info(f"‚ö†Ô∏è Á©∫ÂìçÂ∫îËÆ°Êï∞: {empty_count}/3")
                            if empty_count >= 3:
                                logging.info("‚èπÔ∏è ÁªàÊ≠¢ÂéüÂõ†ÔºöËøûÁª≠3Ê¨°Á©∫ÂìçÂ∫î")
                                break
                        else:
                            empty_count = 0  # ÈáçÁΩÆËÆ°Êï∞Âô®
                            all_users.extend(current_users)
                            logging.info(f"‚úÖ Ëé∑ÂèñÂà∞ {len(current_users)} ‰∏™Áî®Êà∑ | Ê∏∏Ê†á: {next_cursor or 'Êó†'}")

                            # ‰ºòÂåñÔºöÂΩìËøîÂõûÁî®Êà∑Êï∞Â∞ë‰∫éÈ¢ÑÊúüÊó∂ÔºåËØ¥ÊòéÂ∑≤Êé•ËøëÊú´Â∞æ
                            if len(current_users) < 20:  # ÊØèÈ°µÊúüÊúõ20‰∏™Áî®Êà∑
                                logging.info(
                                    f"‚èπÔ∏è ÁªàÊ≠¢ÂéüÂõ†ÔºöËøîÂõûÁî®Êà∑Êï∞({len(current_users)})Â∞ë‰∫éÈ¢ÑÊúü(20)ÔºåÂ∑≤Ëé∑ÂèñÂÆåÊâÄÊúâÊï∞ÊçÆ")
                                break

                        # Êõ¥Êñ∞Ê∏∏Ê†á
                        cursor = next_cursor
                        if not cursor:
                            logging.info("‚èπÔ∏è ÁªàÊ≠¢ÂéüÂõ†ÔºöÊó†Êõ¥Â§öÊï∞ÊçÆ")
                            break
                    else:
                        logging.error("‚ùå ÂìçÂ∫îÊï∞ÊçÆÊ†ºÂºè‰∏çÊ≠£Á°Æ")
                        break
                else:
                    error_text = response.text[:500] if response.text else "No response body"
                    logging.error(f"Ëé∑ÂèñÂÖ≥Ê≥®ÂàóË°®Â§±Ë¥•: {response.status_code} - {error_text}")
                    break

            logging.info(f"üéâ ÂÆåÊàêÔºÅÂÖ±Ëé∑Âèñ {len(all_users)} ‰∏™ÂÖ≥Ê≥®Áî®Êà∑")
            return {
                'users': all_users,
                'count': len(all_users)
            }

        except Exception as e:
            logging.error(f"Ëé∑ÂèñÂÖ≥Ê≥®ÂàóË°®Êó∂Âá∫Èîô: {e}")
            return None

    def get_current_user_info(self, screen_name: str = None) -> Optional[Dict[str, Any]]:
        """
        Ëé∑ÂèñÂΩìÂâçËÆ§ËØÅÁî®Êà∑ÁöÑ‰ø°ÊÅØ
        
        Args:
            screen_name: ÂèØÈÄâÁöÑÁî®Êà∑ÂêçÔºåÂ¶ÇÊûú‰∏çÊèê‰æõÂàôÂ∞ùËØï‰ªéÈÖçÁΩÆ‰∏≠Ëé∑Âèñ
        """
        try:
            # Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõscreen_nameÔºåÂ∞ùËØï‰ªéÈÖçÁΩÆÊñá‰ª∂‰∏≠ËØªÂèñ
            if not screen_name:
                try:
                    from base.config import config
                    screen_name = config.get_x_config().get('current_user_screen_name')
                except Exception as e:
                    logging.warning(f"Êó†Ê≥ï‰ªéÈÖçÁΩÆÊñá‰ª∂ËØªÂèñÁî®Êà∑Âêç: {e}")

            # Â¶ÇÊûú‰ªçÁÑ∂Ê≤°Êúâscreen_nameÔºå‰ΩøÁî®‰∏Ä‰∏™ÈªòËÆ§ÁöÑÊñπÊ≥ï
            if not screen_name:
                logging.error("‚ùå Êó†Ê≥ïÁ°ÆÂÆöÂΩìÂâçÁî®Êà∑ÁöÑscreen_nameÔºåËØ∑Âú®ÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä† 'current_user_screen_name' Â≠óÊÆµ")
                return None

            logging.info(f"üîç Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ: @{screen_name}")

            # ‰ΩøÁî®Áé∞ÊúâÁöÑget_user_by_screen_nameÊñπÊ≥ï
            return self.get_user_by_screen_name(screen_name)

        except Exception as e:
            logging.error(f"Ëé∑ÂèñÂΩìÂâçÁî®Êà∑‰ø°ÊÅØÂºÇÂ∏∏: {e}")
            return None


def create_x_auth_client(auth_token: str) -> XAuthClient:
    """
    ÂàõÂª∫XËÆ§ËØÅÂÆ¢Êà∑Á´Ø - ÂèÇËÄÉTypeScriptÁâàÊú¨ÁöÑXAuthClientÂáΩÊï∞
    
    Args:
        auth_token: TwitterÁöÑauth_token CookieÂÄº
        
    Returns:
        XAuthClientÂÆû‰æã
    """
    return XAuthClient(auth_token)
